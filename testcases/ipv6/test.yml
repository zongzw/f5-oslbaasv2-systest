
- set_fact:
    test_casename: "ipv6 test"
    test_subnet: "{{ test_ipv6_subnet }}"
    test_listener_protocol: HTTP
    test_pool_protocol: HTTP
    test_listener_tcpport: 80
    test_healthmonitor_protocol: PING

- import_tasks: ../../playbooks/task-define-resources.yml

- import_tasks: ../../playbooks/task-create-resources.yml

- import_tasks: ../../playbooks/task-get-resourceids.yml

- name: collect resources from bigip
  bigip_device_info:
    gather_subset:
      - virtual-servers
      - virtual-addresses
    provider:
      user: admin
      server: "{{ item }}"
      password: "{{ hostvars[item].admin_password }}"
      validate_certs: False
  register: bigip_infos
  with_items: "{{ groups['bigips'] }}"
  delegate_to: localhost
  run_once: true

# - debug: msg={{ item.virtual_servers }}
#   with_items: "{{ bigip_infos.results }}"

- assert:
    that:
      - item | json_query(virtual_string) | length == 1
      - (item | json_query(address_string))[0].address == vip_address.stdout
    quiet: yes
  vars:
    virtual_string: "virtual_servers[?name == '{{ environment_prefix }}_{{ listener_id }}']"
    address_string: "virtual_addresses[?name == '{{ environment_prefix }}_{{ loadbalancer_id}}']"
  with_items: "{{ bigip_infos.results }}"
  loop_control:
    label: "{{ item.item }} - listener:{{listener_id}} - loadbalancer:{{loadbalancer_id}}"
  run_once: true

- name: "Check {{ test_listener_protocol }} {{ test_listener_tcpport }} is reachable"
  shell: curl -D  -k -6 -v -g http://[{{ vip_address.stdout }}]:{{ test_listener_tcpport }}
  args:
    warn: no
  delegate_to: "{{ item }}"
  with_items: "{{groups['clients_ipv6']}}"
  when: test_env == 'osp'

- name: "{{ testcasename }}: create pool of ipv6, bind it to {{ listener }}"
  shell: |
    source {{ openrc }} && bash /tmp/scripts/wait_assert_lb_active.sh {{ loadbalancer }} && {{ item }}
  with_items:
    - neutron --debug lbaas-pool-create --name {{ pool }}-ipv6 --loadbalancer {{ loadbalancer }} --lb-algorithm ROUND_ROBIN --protocol {{ pool_protocol }}
    - neutron --debug lbaas-healthmonitor-create --name {{ healthmonitor }}-ipv6 --delay 15 --timeout 25 --max-retries 10 --type {{ healthmonitor_protocol }} --pool {{ pool }}-ipv6
    - neutron --debug lbaas-listener-update --default-pool {{ pool }}-ipv6 {{ listener }}

- name: "{{ testcasename }}: create members under pool {{ pool }}-ipv6"
  shell: |
    source {{ openrc }} && \
      bash /tmp/scripts/wait_assert_lb_active.sh {{ loadbalancer }} && \
      neutron --debug lbaas-member-create --subnet {{ hostvars[item].subnet }} --address {{ item }} --protocol-port {{ member_tcpport }} {{ pool }}-ipv6
  with_items:
    - "{{ hostvars[inventory_hostname]['groups']['backend_servers_ipv6'] }}"

- name: "{{ testcasename }}: waiting for ipv6 resource created/updated"
  shell: |
    source {{ openrc }} && \
      bash /tmp/scripts/wait_assert_lb_active.sh {{ loadbalancer }}

- name: "get ipv6 member's id"
  shell: |
    source {{ openrc }} && \
      neutron lbaas-member-list {{ pool }}-ipv6 --format value --column id
  register: ipv6_member_ids

- import_tasks: ../../playbooks/task-neutron-db-info.yml

- name: get ipv6 member's operating_status
  community.mysql.mysql_query:
    login_host: "{{ neutron_db_info.results[2].stdout }}"
    login_user: "{{ neutron_db_info.results[0].stdout }}"
    login_password: "{{ neutron_db_info.results[1].stdout }}"
    login_db: "{{ neutron_db_info.results[3].stdout }}"
    query: select operating_status from lbaas_members where id = '{{ item }}'
  with_items: "{{ ipv6_member_ids.stdout_lines }}"
  register: op_status

- name: assert the ipv6 member's status from neutron db is ONLINE after creation.
  assert:
    that:
      - "'ONLINE' in '{{ item.1 }}'"
    quiet: yes
  with_together:
    - "{{ ipv6_member_ids.stdout_lines }}"
    - "{{ op_status.results | map(attribute='query_result',default=' ') | \ 
        flatten | map(attribute='operating_status',default=' ') | list  }}"
  loop_control:
    label: "{{ item.0 }}"

- name: "Check {{ test_listener_protocol }} {{ test_listener_tcpport }} is reachable"
  shell: curl -D  -k -6 -v -g http://[{{ vip_address.stdout }}]:{{ test_listener_tcpport }}
  args:
    warn: no
  delegate_to: "{{ item }}"
  with_items: "{{groups['clients_ipv6']}}"
  when: test_env == 'osp'

- name: remove {{ pool }}-ipv6 and its healthmonitor
  shell: |
    source {{ openrc }} && \
      bash /tmp/scripts/wait_assert_lb_active.sh {{ loadbalancer }} && {{ item }}
  with_items:
    - neutron --debug lbaas-healthmonitor-delete {{ healthmonitor }}-ipv6
    - neutron --debug lbaas-pool-delete {{ pool }}-ipv6
  when: nodelete is not defined

- import_tasks: ../../playbooks/task-remove-resources.yml