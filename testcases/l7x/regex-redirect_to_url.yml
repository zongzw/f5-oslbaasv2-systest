
- set_fact:
    test_casename: "l7policy regex + redirect_to_url test"
    test_listener_protocol: HTTP
    test_pool_protocol: HTTP
    test_listener_tcpport: 80
    test_healthmonitor_protocol: PING

- import_tasks: ../../playbooks/task-define-resources.yml

- import_tasks: ../../playbooks/task-create-resources.yml

- import_tasks: ../../playbooks/task-get-resourceids.yml

- name: create l7policy and l7rule with {{ listener }}
  shell: |
    source {{ openrc }} && \
    bash /tmp/scripts/wait_assert_lb_active.sh {{ loadbalancer }} && {{ item }}
  with_items:
    - neutron lbaas-l7policy-create --name {{ l7policy }} --listener {{ listener }} --action redirect_to_url --redirect-url http://{{ groups['pool2'][0]}} --position 1 && neutron lbaas-l7rule-create {{ l7policy }} --type PATH --compare-type regex --value "/*"
    - echo

- name: get redirect_to_url irule id
  shell: |
    source {{ openrc }} && neutron lbaas-l7rule-list {{ l7policy }} --format value --column id
  register: irule_ids
  run_once: true

- debug: msg="irule id => {{ irule_ids.stdout }}"
  run_once: true

- bigip_device_info:
    gather_subset:
      - irules
      - virtual-servers  # TODO: Check virtual server contains irule reference
    provider:
      user: admin
      server: "{{ item }}"
      password: "{{ hostvars[item].admin_password }}"
      validate_certs: False
  register: bigip_infos
  with_items: "{{ groups['bigips'] }}"
  delegate_to: localhost

- name: assert redirect_to_url irules created
  assert:
    that:
      - "{{ item | json_query(query_string) | length }} == 1"
    quiet: yes
  vars:
    query_string: "irules[?name == 'irule_{{ irule_ids.stdout }}']"
  with_items: "{{ bigip_infos.results }}"
  loop_control:
    label: "irule_{{ irule_ids.stdout }}"

- name: Check virtual server contains irule reference
  assert:
    that:
      - "{{ item | json_query(query_string) | length }} == 1"
      - "'/{{ environment_prefix }}_{{ project_id }}/irule_{{ irule_ids.stdout }}' in (( item | json_query(query_string) )[0].irules )"
    quiet: yes
  vars:
    query_string: "virtual_servers[?name == '{{ environment_prefix }}_{{ listener_id }}']"
  with_items: "{{ bigip_infos.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: "Check {{ test_listener_protocol }} {{ test_listener_tcpport }} is reachable"
  shell: curl http://{{ vip_address.stdout }}:{{ test_listener_tcpport }} -v
  args:
    warn: no
  register: curl_results
  delegate_to: "{{ item }}"
  with_items: "{{groups['clients_ipv4']}}"
  when: test_env == 'osp'

# - debug: msg="{{ curl_results }}"
- name: "check curl response contains '{{ groups['pool2'][0]}}' and 302"
  assert:
    that:
      - "{{ item }}.stderr | regex_search('{{ groups['pool2'][0]}}') != None"
      - "{{ item }}.stderr | regex_search('302 Moved Temporarily') != None"
    quiet: yes
  loop_control:
    label: "{{ item.item }}"
  with_items: "{{ curl_results.results }}"
  when: test_env == 'osp'

- name: delete l7policy and l7rule
  shell: |
    source {{ openrc }} && \
    bash /tmp/scripts/wait_assert_lb_active.sh {{ loadbalancer }} && \
    neutron lbaas-l7policy-delete {{ l7policy }}
  when: nodelete is not defined

- import_tasks: ../../playbooks/task-remove-resources.yml
