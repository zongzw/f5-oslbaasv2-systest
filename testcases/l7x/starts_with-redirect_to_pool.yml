
- set_fact:
    test_casename: "l7policy starts_with + redirect_to_pool test"
    test_listener_protocol: HTTP
    test_pool_protocol: HTTP
    test_listener_tcpport: 80
    test_healthmonitor_protocol: PING

- import_tasks: ../../playbooks/task-define-resources.yml

- import_tasks: ../../playbooks/task-create-resources.yml

- import_tasks: ../../playbooks/task-get-resourceids.yml

- name: "Check {{ test_listener_protocol }} {{ test_listener_tcpport }} is reachable without l7policy redirect_to_pool"
  shell: curl http://{{ vip_address.stdout }}:{{ test_listener_tcpport }}/api
  args:
    warn: no
  register: curl_results
  delegate_to: "{{ item }}"
  with_items: "{{groups['clients_ipv4']}}"
  when: test_env == 'osp'

# - debug: msg="{{ curl_results }}"

# assert the response is from pool1
- name: "assert the response is from pool1"
  assert:
    that:
      - "({{ item }}.stdout |  regex_search('pool1')) != None"
    quiet: yes
  loop_control:
    label: "{{ item.item }}"
  with_items: "{{ curl_results.results }}"
  when: test_env == 'osp'

- name: "{{ testcasename }}: create pool2 l7policy, bind it to {{ listener }} via l7policy"
  shell: |
    source {{ openrc }} && bash /tmp/scripts/wait_assert_lb_active.sh {{ loadbalancer }} && {{ item }}
  with_items:
    - neutron --debug lbaas-pool-create --name {{ pool }}-pool2 --loadbalancer {{ loadbalancer }} --lb-algorithm ROUND_ROBIN --protocol {{ pool_protocol }}
    - neutron --debug lbaas-healthmonitor-create --name {{ healthmonitor }}-pool2 --delay 15 --timeout 25 --max-retries 10 --type {{ healthmonitor_protocol }} --pool {{ pool }}-pool2
    - neutron lbaas-l7policy-create --name {{ l7policy }} --listener {{ listener }} --action redirect_to_pool --redirect-pool {{ pool }}-pool2 --position 1 && neutron lbaas-l7rule-create {{ l7policy }} --type PATH --compare-type starts_with --value "/api"

- name: "{{ testcasename }}: create members under pool {{ pool }}-pool2"
  shell: |
    source {{ openrc }} && \
      bash /tmp/scripts/wait_assert_lb_active.sh {{ loadbalancer }} && \
      neutron --debug lbaas-member-create --subnet {{ hostvars[item].subnet }} --address {{ item }} --protocol-port {{ member_tcpport }} {{ pool }}-pool2
  with_items:
    - "{{ hostvars[inventory_hostname]['groups']['pool2'] }}"

- bigip_device_info:
    gather_subset:
      - ltm-policies
      - virtual-servers
    provider:
      user: admin
      server: "{{ item }}"
      password: "{{ hostvars[item].admin_password }}"
      validate_certs: False
  register: bigip_infos
  with_items: "{{ groups['bigips'] }}"
  delegate_to: localhost

- name: assert redirect_to_pool l7policy created
  assert:
    that:
      - "{{ item | json_query(query_string) | length }} == 1"
    quiet: yes
  vars:
    query_string: "ltm_policies[?name == 'wrapper_policy_{{ listener_id }}']"
  with_items: "{{ bigip_infos.results }}"
  loop_control:
    label: "wrapper_policy_{{ listener_id }}"

# TODO: failed test
# - name: Check virtual server contains ltm-policy reference
#   assert:
#     that:
#       - "{{ item | json_query(query_string) | length }} == 1"
#       - "'/{{ environment_prefix }}_{{ project_id }}/wrapper_policy_{{ listener_id }}' in (( item | json_query(query_string) )[0].policies )"
#     quiet: yes
#   vars:
#     query_string: "virtual_servers[?name == '{{ environment_prefix }}_{{ listener_id }}']"
#   with_items: "{{ bigip_infos.results }}"
#   loop_control:
#     label: "{{ item.item }}"

- name: "Check {{ test_listener_protocol }} {{ test_listener_tcpport }} is reachable"
  shell: curl http://{{ vip_address.stdout }}:{{ test_listener_tcpport }}/api
  args:
    warn: no
  register: curl_results
  delegate_to: "{{ item }}"
  with_items: "{{ groups['clients_ipv4'] }}"
  when: test_env == 'osp'

# - debug: msg="{{ curl_results }}"

- name: "assert the response is from pool2"
  assert:
    that:
      - "({{ item }}.stdout |  regex_search('pool2')) != None"
    quiet: yes
  loop_control:
    label: "{{ item.item }}"
  with_items: "{{ curl_results.results }}"
  when: test_env == 'osp'

- name: remove {{ pool }}-pool2 and its healthmonitor, l7policy and l7rule
  shell: |
    source {{ openrc }} && \
      bash /tmp/scripts/wait_assert_lb_active.sh {{ loadbalancer }} && {{ item }}
  with_items:
    - neutron lbaas-l7policy-delete {{ l7policy }}
    - neutron --debug lbaas-healthmonitor-delete {{ healthmonitor }}-pool2
    - neutron --debug lbaas-pool-delete {{ pool }}-pool2
  when: nodelete is not defined

- import_tasks: ../../playbooks/task-remove-resources.yml
